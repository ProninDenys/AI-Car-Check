import os
import requests
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from dotenv import load_dotenv

load_dotenv()

# API –∫–ª—é—á –¥–ª—è RapidAPI
API_KEY = "ae6c77f019msh6cad65d207e4245p1e3c08jsn66ce1bd839c3"
VIN_API_URL = "https://vin-decoder-api-usa.p.rapidapi.com/vin"

# –¢–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_menu():
    keyboard = [
        ["üîç Check Car by VIN"],
        ["‚ùì FAQ"],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ VIN
def get_car_info(vin_code):
    headers = {
        'X-RapidAPI-Key': API_KEY,
        'X-RapidAPI-Host': 'vin-decoder-api-usa.p.rapidapi.com'
    }
    params = {
        'v': vin_code
    }
    response = requests.get(VIN_API_URL, headers=headers, params=params)
    
    if response.status_code == 200:
        return response.json()
    else:
        return None

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Welcome to USA VIN Check Bot! Choose an option below:", 
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ VIN
async def handle_vin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    vin_code = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ VIN (17 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(vin_code) != 17:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π VIN –∫–æ–¥ –∏–∑ 17 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–µ
    car_data = get_car_info(vin_code)
    
    if car_data:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—à–∏–Ω–µ
        car_info = f"**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ –¥–ª—è VIN: {vin_code}**\n\n"
        car_info += f"**–ú–∞—Ä–∫–∞**: {car_data.get('make', 'N/A')}\n"
        car_info += f"**–ú–æ–¥–µ–ª—å**: {car_data.get('model', 'N/A')}\n"
        car_info += f"**–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞**: {car_data.get('year', 'N/A')}\n"
        car_info += f"**–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è**: {car_data.get('engine', 'N/A')}\n"
        car_info += f"**–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞**: {car_data.get('fuel', 'N/A')}\n"
        car_info += f"**–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è**: {car_data.get('transmission', 'N/A')}\n"
        
        await update.message.reply_text(car_info)
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç—Ç–æ–º—É VIN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ FAQ
async def handle_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    faq = """**FAQ:**
    - –ß—Ç–æ —Ç–∞–∫–æ–µ VIN? 
      VIN (Vehicle Identification Number) ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.
    
    - –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VIN Check?
      –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ VIN –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∏—Å—Ç–æ—Ä–∏—é –∞–≤–∞—Ä–∏–π –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ."""
    
    await update.message.reply_text(faq)

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üîç Check Car by VIN":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ VIN –∫–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    elif text == "‚ùì FAQ":
        await handle_faq(update, context)
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.", reply_markup=get_main_menu())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

print("USA VIN Check Bot is running...")
app.run_polling()